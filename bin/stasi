#!/usr/bin/env ruby
#encoding: UTF-8
require 'stasi'
require 'httpclient'

pebble, url = ARGV
unless pebble or url
  puts "Usage: stasi <pebble> <url>"
  puts "Example: stasi grove http://grove.dev/api/grove/v1/posts/post.*:*"
  exit(0)
end

worker_pids = `command ps ax | grep 'unicorn worker' | grep -v grep | grep #{pebble}`.split("\n").map { |l| l.strip.split(/\s+/).first }

if worker_pids.empty?
  puts "No worker process found for #{pebble}"
  exit(0)
end

interrupted = false
trap("INT") { interrupted = true }

graphics = Terminal::TerminalGraphics.new(0, 0)
graphics.prepare

worker_pids.each_with_index do |pid, i|
  Thread.new do

    offset_left = if i % 2 == 0 then 1 else 53 end
    offset_top = if (i/2) == 0 then 7 else 18+07 end

    title = Terminal::Layer.new(height: 1, width: 40, top: offset_top , left: offset_left)
    title.text(0, 0, ("-"*50).green)
    title.text(8, 0, " #{pebble.capitalize} worker #{i} (pid ##{pid}) ".green)
    title.paint(graphics)

    graph = Terminal::Layer.new(height: 15, width: 40, top: offset_top+1, left: offset_left, opaque: true)
    current_usage = Terminal::Layer.new(height: 15, width: 10, top: offset_top+1, left: offset_left+40)

    prober = Prober.new(pid)

    while true
      prober.probe
      graph.move_left
      top = 15 - ((prober.usage) % 15)
      graph.text(39, top, "Â·".cyan)
      current_usage.text(1, top, "#{prober.usage.round(2)}MB")
      graph.paint(graphics)
      current_usage.paint(graphics)
      sleep 0.5
      current_usage.text(1, top, ' '*10)
    end
  end
end

title = Terminal::Layer.new(top: 1, height: 1, width: 80) do |layer|
  layer.text(1, 0, "Worker pids: #{worker_pids.join(", ")}")
end

request_counter = Terminal::Layer.new(height: 3, width: 80, top: 3)
title.paint(graphics)

sleep 0.5
1000000.times do |i|
  break if interrupted
  start = Time.new
  status = HTTPClient.get(url).status
  duration = Time.new - start
  request_counter.text(0, 0, " Request  ##{i} / status #{status.to_s.send((200...299).include?(status.to_i) ? :green : :red )}")
  request_counter.text(0, 1, "  Url:    #{url}")
  request_counter.text(0, 2, "  Timing: #{duration.round(2)}s / #{(1/duration).round(2)} req/s "+' '*10)
  request_counter.paint(graphics)
end

graphics.reset

puts "We'll meet again!"
exit(0)